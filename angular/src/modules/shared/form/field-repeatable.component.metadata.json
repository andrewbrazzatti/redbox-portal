[{"__symbolic":"module","version":4,"metadata":{"RepeatableContainer":{"__symbolic":"class","extends":{"__symbolic":"reference","module":"./field-simple","name":"Container","line":32,"character":41},"members":{"__ctor__":[{"__symbolic":"constructor","parameters":[{"__symbolic":"reference","name":"any"},{"__symbolic":"reference","name":"any"}]}],"getInitArrayEntry":[{"__symbolic":"method"}],"getGroup":[{"__symbolic":"method"}],"createNewElem":[{"__symbolic":"method"}],"getCloneCustomizer":[{"__symbolic":"method"}],"addElem":[{"__symbolic":"method"}],"removeElem":[{"__symbolic":"method"}],"triggerValidation":[{"__symbolic":"method"}]}},"EmbeddableComponent":{"__symbolic":"class","extends":{"__symbolic":"reference","module":"./field-simple.component","name":"SimpleComponent","line":156,"character":41},"members":{"canRemove":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":157,"character":3}}]}],"removeBtnText":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":158,"character":3}}]}],"removeBtnClass":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":159,"character":3}}]}],"index":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":160,"character":3}}]}],"onRemoveBtnClick":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Output","line":161,"character":3}}]}],"onRemove":[{"__symbolic":"method"}],"getGroupClass":[{"__symbolic":"method"}]}},"RepeatableComponent":{"__symbolic":"class","extends":{"__symbolic":"reference","module":"./field-simple.component","name":"SimpleComponent","line":176,"character":41},"members":{"addElem":[{"__symbolic":"method"}],"removeElem":[{"__symbolic":"method"}]}},"RepeatableVocabComponent":{"__symbolic":"class","extends":{"__symbolic":"reference","name":"RepeatableComponent"},"decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Component","line":188,"character":1},"arguments":[{"selector":"repeatable-vocab","template":"\n  <div *ngIf=\"field.editMode\">\n    <div class=\"row\">\n      <div class=\"col-xs-12\">\n      <label>{{field.label}}\n        <button type=\"button\" class=\"btn btn-default\" *ngIf=\"field.help\" (click)=\"toggleHelp()\"><span class=\"glyphicon glyphicon-question-sign\" aria-hidden=\"true\"></span></button>\n      </label>\n      <span id=\"{{ 'helpBlock_' + field.name }}\" class=\"help-block\" *ngIf=\"this.helpShow\" [innerHtml]=\"field.help\"></span>\n      </div>\n    </div>\n    <div *ngFor=\"let fieldElem of field.fields; let i = index;\" class=\"row\">\n      <span class=\"col-xs-12\">\n        <rb-vocab [field]=\"fieldElem\" [form]=\"form\" [fieldMap]=\"fieldMap\" [isEmbedded]=\"true\" [removeBtnText]=\"field.removeButtonText\" [removeBtnClass]=\"field.removeButtonClass\" [canRemove]=\"field.fields.length > 1\" (onRemoveBtnClick)=\"removeElem($event[0], $event[1])\" [index]=\"i\"></rb-vocab>\n      </span>\n    </div>\n    <div class=\"row\">\n      <span class=\"col-xs-11\">&nbsp;\n      </span>\n      <span class=\"col-xs-1\">\n        <button *ngIf=\"field.addButtonText\" type='button' (click)=\"addElem($event)\" [ngClass]=\"field.addButtonTextClass\" >{{field.addButtonText}}</button>\n        <button *ngIf=\"!field.addButtonText\" type='button' (click)=\"addElem($event)\" [ngClass]=\"field.addButtonClass\"></button>\n      </span>\n    </div>\n  </div>\n  <li *ngIf=\"!field.editMode\" class=\"key-value-pair\">\n    <span *ngIf=\"field.label\" class=\"key\">{{field.label}}</span>\n    <span class=\"value\">\n      <ul class=\"key-value-list\">\n        <rb-vocab *ngFor=\"let fieldElem of field.fields; let i = index;\" [field]=\"fieldElem\" [form]=\"form\" [fieldMap]=\"fieldMap\"></rb-vocab>\n      </ul>\n    </span>\n  </li>\n  "}]}]},"RepeatableContributor":{"__symbolic":"class","extends":{"__symbolic":"reference","name":"RepeatableContainer"}},"RepeatableContributorComponent":{"__symbolic":"class","extends":{"__symbolic":"reference","name":"RepeatableComponent"},"decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Component","line":231,"character":1},"arguments":[{"selector":"repeatable-contributor","template":"\n  <div *ngIf=\"field.editMode\">\n    <div *ngFor=\"let fieldElem of field.fields; let i = index;\" class=\"row\">\n      <span class=\"col-xs-10\">\n        <rb-contributor [field]=\"fieldElem\" [form]=\"form\" [fieldMap]=\"fieldMap\" [isEmbedded]=\"true\"></rb-contributor>\n      </span>\n      <span class=\"col-xs-2\">\n        <button type='button' *ngIf=\"field.fields.length > 1 && field.removeButtonText\" (click)=\"removeElem($event, i)\"  [ngClass]=\"field.removeButtonTextClass\" [ngStyle]=\"{'margin-top': fieldElem.marginTop}\" >{{field.removeButtonText}}</button>\n        <button type='button' *ngIf=\"field.fields.length > 1 && !field.removeButtonText\" (click)=\"removeElem($event, i)\" [ngClass]=\"field.removeButtonClass\" [ngStyle]=\"{'margin-top': fieldElem.marginTop}\" ></button>\n      </span>\n    </div>\n    <div class=\"row\">\n      <span class=\"col-xs-12\">\n        <button *ngIf=\"field.addButtonText\" type='button' (click)=\"addElem($event)\" [ngClass]=\"field.addButtonTextClass\" >{{field.addButtonText}}</button>\n        <button *ngIf=\"!field.addButtonText\" type='button' (click)=\"addElem($event)\" [ngClass]=\"field.addButtonClass\" ></button>\n      </span>\n    </div>\n  </div>\n  <div  *ngIf=\"!field.editMode\" class=\"table-responsive\">\n    <table class=\"table table-striped table-condensed\">\n      <thead><th>{{field.fields[0].nameColHdr}}</th><th>{{field.fields[0].emailColHdr}}</th><th>{{field.fields[0].roleColHdr}}</th></thead>\n      <tbody>\n        <tr *ngFor=\"let fieldElem of field.fields; let i = index;\">\n          <td>{{fieldElem.value.name}}</td>\n          <td>{{fieldElem.value.email}}</td>\n          <td>{{fieldElem.value.role}}</td>\n        </tr>\n      </tbody>\n    </table>\n  </div>\n  "}]}],"members":{"ngOnInit":[{"__symbolic":"method"}],"addElem":[{"__symbolic":"method"}],"removeElem":[{"__symbolic":"method"}]}}}}]