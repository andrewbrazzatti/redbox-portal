[{"__symbolic":"module","version":4,"metadata":{"SimpleComponent":{"__symbolic":"class","members":{"field":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":35,"character":3}}]}],"form":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":39,"character":3}}]}],"fieldMap":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":43,"character":3}}]}],"index":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":47,"character":3}}]}],"name":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":51,"character":3}}]}],"isEmbedded":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":53,"character":3}}]}],"getFormControl":[{"__symbolic":"method"}],"getGroupClass":[{"__symbolic":"method"}],"hasRequiredError":[{"__symbolic":"method"}],"toggleHelp":[{"__symbolic":"method"}],"getRequiredLabelStr":[{"__symbolic":"method"}],"getFromInjector":[{"__symbolic":"method"}]}},"TextAreaComponent":{"__symbolic":"class","extends":{"__symbolic":"reference","name":"SimpleComponent"},"decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Component","line":141,"character":1},"arguments":[{"selector":"text-area","template":"\n  <div *ngIf=\"field.editMode\" [formGroup]='form' class=\"form-group\">\n    <label [attr.for]=\"field.name\">\n      {{field.label}} {{ getRequiredLabelStr()}}\n      <button type=\"button\" class=\"btn btn-default\" *ngIf=\"field.help\" (click)=\"toggleHelp()\"><span class=\"glyphicon glyphicon-question-sign\" aria-hidden=\"true\"></span></button>\n    </label><br/>\n    <span id=\"{{ 'helpBlock_' + field.name }}\" class=\"help-block\" *ngIf=\"this.helpShow\" [innerHtml]=\"field.help\"></span>\n    <textarea [formControl]=\"getFormControl()\"  [attr.rows]=\"field.rows\" [attr.cols]=\"field.cols\" [id]=\"field.name\" class=\"form-control\">{{field.value}}</textarea>\n    <div class=\"text-danger\" *ngIf=\"getFormControl().hasError('required') && getFormControl().touched && !field.validationMessages?.required\">{{field.label}} is required</div>\n    <div class=\"text-danger\" *ngIf=\"getFormControl().hasError('required') && getFormControl().touched && field.validationMessages?.required\">{{field.validationMessages.required}}</div>\n  </div>\n  <li *ngIf=\"!field.editMode\" class=\"key-value-pair\">\n    <span class=\"key\" *ngIf=\"field.label\">{{field.label}}</span>\n    <span *ngFor=\"let line of field.lines\">\n      {{line}}\n      <br/>\n    </span>\n    <br/>\n  </li>\n  "}]}],"members":{"ngOnInit":[{"__symbolic":"method"}]}},"SelectionComponent":{"__symbolic":"class","extends":{"__symbolic":"reference","name":"SimpleComponent"},"members":{"getLabel":[{"__symbolic":"method"}]}},"DropdownFieldComponent":{"__symbolic":"class","extends":{"__symbolic":"reference","name":"SelectionComponent"},"decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Component","line":188,"character":1},"arguments":[{"selector":"dropdownfield","template":"\n  <div [formGroup]='form' *ngIf=\"field.editMode\" class=\"form-group\">\n     <label [attr.for]=\"field.name\">\n      {{field.label}} {{ getRequiredLabelStr()}}\n      <button type=\"button\" class=\"btn btn-default\" *ngIf=\"field.help\" (click)=\"toggleHelp()\"><span class=\"glyphicon glyphicon-question-sign\" aria-hidden=\"true\"></span></button>\n     </label><br/>\n     <span id=\"{{ 'helpBlock_' + field.name }}\" class=\"help-block\" *ngIf=\"this.helpShow\" [innerHtml]=\"field.help\"></span>\n     <select [formControl]=\"getFormControl()\"  [id]=\"field.name\" class=\"form-control\">\n        <option *ngFor=\"let opt of field.options\" [value]=\"opt.value\">{{opt.label}}</option>\n     </select>\n     <div class=\"text-danger\" *ngIf=\"getFormControl().hasError('required') && getFormControl().touched && !field.validationMessages?.required\">{{field.label}} is required</div>\n     <div class=\"text-danger\" *ngIf=\"getFormControl().hasError('required') && getFormControl().touched && field.validationMessages?.required\">{{field.validationMessages.required}}</div>\n  </div>\n  <div *ngIf=\"!field.editMode\" class=\"key-value-pair\">\n    <span class=\"key\" *ngIf=\"field.label\">{{field.label}}</span>\n    <span class=\"value\">{{getLabel(field.value)}}</span>\n  </div>\n  "}]}]},"SelectionFieldComponent":{"__symbolic":"class","extends":{"__symbolic":"reference","name":"SelectionComponent"},"decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Component","line":212,"character":1},"arguments":[{"selector":"selectionfield","template":"\n  <div [formGroup]='form' *ngIf=\"field.editMode\" class=\"form-group\">\n     <label [attr.for]=\"field.name\">\n      {{field.label}} {{ getRequiredLabelStr()}}\n      <button type=\"button\" class=\"btn btn-default\" *ngIf=\"field.help\" (click)=\"toggleHelp()\"><span class=\"glyphicon glyphicon-question-sign\" aria-hidden=\"true\"></span></button>\n     </label><br/>\n     <span id=\"{{ 'helpBlock_' + field.name }}\" class=\"help-block\" *ngIf=\"this.helpShow\" [innerHtml]=\"field.help\"></span>\n     <span *ngFor=\"let opt of field.options\">\n      <!-- radio type hard-coded otherwise accessor directive will not work! -->\n      <input *ngIf=\"isRadio()\" type=\"radio\" name=\"{{field.name}}\" [id]=\"field.name + '_' + opt.value\" [formControl]=\"getFormControl()\" [value]=\"opt.value\">\n      <input *ngIf=\"!isRadio()\" type=\"{{field.controlType}}\" name=\"{{field.name}}\" [id]=\"field.name + '_' + opt.value\" [value]=\"opt.value\" (change)=\"onChange(opt, $event)\" [attr.selected]=\"getControlFromOption(opt)\" [attr.checked]=\"getControlFromOption(opt)\">\n      <label for=\"{{field.name + '_' + opt.value}}\" class=\"radio-label\">{{ opt.label }}</label>\n      <br/>\n     </span>\n     <div class=\"text-danger\" *ngIf=\"getFormControl().hasError('required') && getFormControl().touched && !field.validationMessages?.required\">{{field.label}} is required</div>\n     <div class=\"text-danger\" *ngIf=\"getFormControl().hasError('required') && getFormControl().touched && field.validationMessages?.required\">{{field.validationMessages.required}}</div>\n  </div>\n  <div *ngIf=\"!field.editMode\" class=\"key-value-pair\">\n    <ng-container *ngIf=\"isRadio()\">\n      <span *ngIf=\"field.label\" class=\"key\">{{field.label}}</span>\n      <span class=\"value\">{{getLabel(field.value)}}</span>\n    </ng-container>\n    <ng-container *ngIf=\"!isRadio()\">\n      <span *ngIf=\"field.label\" class=\"key\">{{field.label}}</span>\n      <span class=\"value\" *ngFor=\"let value of field.value\">{{getLabel(value)}}<br/></span>\n    </ng-container>\n  </div>\n  "}]}],"members":{"isRadio":[{"__symbolic":"method"}],"getControlFromOption":[{"__symbolic":"method"}],"onChange":[{"__symbolic":"method"}]}},"TabOrAccordionContainerComponent":{"__symbolic":"class","extends":{"__symbolic":"reference","name":"SimpleComponent"},"decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Component","line":278,"character":1},"arguments":[{"selector":"tabcontainer","template":"\n  <div *ngIf=\"field.editMode\" class=\"row\" style=\"min-height:300px;\">\n    <div [ngClass]=\"field.cssClasses\">\n      <div [ngClass]=\"field.tabNavContainerClass\">\n        <ul [ngClass]=\"field.tabNavClass\">\n          <li *ngFor=\"let tab of field.fields\" [ngClass]=\"{'active': tab.active}\"><a href=\"#{{tab.id}}\" data-toggle=\"tab\" role=\"tab\">{{tab.label}}</a></li>\n        </ul>\n      </div>\n      <div [ngClass]=\"field.tabContentContainerClass\">\n        <div [ngClass]=\"field.tabContentClass\">\n      <!--\n      Inlined the tab definition instead of creating it's own component otherwise Bootstrap refuses to toggle the panes\n      Likely because of the extra DOM node (component selector) that it doesn't know what to do.\n      TODO: remove inlining, or perhaps consider a 3rd-party NG2 tab component\n      -->\n          <div *ngFor=\"let tab of field.fields\" [ngClass]=\"{'tab-pane': true, 'fade': true, 'active': tab.active==true, 'in': tab.active==true}\" id=\"{{tab.id}}\">\n            <dmp-field *ngFor=\"let field of tab.fields\" [field]=\"field\" [form]=\"form\" class=\"form-row\" [fieldMap]=\"fieldMap\" [parentId]=\"tab.id\"></dmp-field>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n  <div *ngIf=\"!field.editMode\" [ngClass]=\"field.accContainerClass\">\n    <div class=\"panel-group\">\n      <div *ngFor=\"let tab of field.fields\" [ngClass]=\"field.accClass\">\n        <div class=\"panel-heading\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" href=\"#{{tab.id}}\">{{tab.label}}</a>\n          </h4>\n        </div>\n        <div id=\"{{tab.id}}\" class=\"panel-collapse collapse\">\n          <div class=\"panel-body\">\n            <ul class=\"key-value-list\">\n              <dmp-field *ngFor=\"let field of tab.fields\" [field]=\"field\" [form]=\"form\" class=\"form-row\" [fieldMap]=\"fieldMap\"></dmp-field>\n            </ul>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n  "}]}],"members":{"ngAfterViewInit":[{"__symbolic":"method"}]}},"ButtonBarContainerComponent":{"__symbolic":"class","extends":{"__symbolic":"reference","name":"SimpleComponent"},"decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Component","line":335,"character":1},"arguments":[{"selector":"buttonbarcontainer","template":"\n    <div *ngIf=\"field.editMode\" class=\"form-row\">\n      <div class=\"pull-right col-md-10\">\n      <dmp-field *ngFor=\"let field1 of field.fields\" [field]=\"field1\" [form]=\"form\" class=\"form-row\" [fieldMap]=\"fieldMap\"></dmp-field>\n    </div>\n  "}]}]},"HtmlRawComponent":{"__symbolic":"class","extends":{"__symbolic":"reference","name":"SimpleComponent"},"decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Component","line":349,"character":1},"arguments":[{"selector":"htmlraw","template":"\n  <ng-content></ng-content>\n  "}]}]},"TextBlockComponent":{"__symbolic":"class","extends":{"__symbolic":"reference","name":"SimpleComponent"},"decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Component","line":359,"character":1},"arguments":[{"selector":"text-block","template":"\n  <div [ngSwitch]=\"field.type\">\n    <h1 *ngSwitchCase=\"'h1'\" [ngClass]=\"field.cssClasses\">{{field.value}}</h1>\n    <h2 *ngSwitchCase=\"'h2'\" [ngClass]=\"field.cssClasses\">{{field.value}}</h2>\n    <h3 *ngSwitchCase=\"'h3'\" [ngClass]=\"field.cssClasses\">{{field.value}}</h3>\n    <h4 *ngSwitchCase=\"'h4'\" [ngClass]=\"field.cssClasses\">{{field.value}}</h4>\n    <h5 *ngSwitchCase=\"'h5'\" [ngClass]=\"field.cssClasses\">{{field.value}}</h5>\n    <hr *ngSwitchCase=\"'hr'\" [ngClass]=\"field.cssClasses\">\n    <span *ngSwitchCase=\"'span'\" [ngClass]=\"field.cssClasses\">{{field.value}}</span>\n    <p *ngSwitchDefault [ngClass]=\"field.cssClasses\">{{field.value}}</p>\n  </div>\n  "}]}]},"DateTimeComponent":{"__symbolic":"class","extends":{"__symbolic":"reference","name":"SimpleComponent"},"decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Component","line":382,"character":1},"arguments":[{"selector":"date-time","template":"\n  <div *ngIf=\"field.editMode\" [formGroup]='form' class=\"form-group\">\n    <label [attr.for]=\"field.name\">\n      {{field.label}} {{ getRequiredLabelStr()}}\n      <button type=\"button\" class=\"btn btn-default\" *ngIf=\"field.help\" (click)=\"toggleHelp()\"><span class=\"glyphicon glyphicon-question-sign\" aria-hidden=\"true\"></span></button>\n    </label><br/>\n    <span id=\"{{ 'helpBlock_' + field.name }}\" class=\"help-block\" *ngIf=\"this.helpShow\" [innerHtml]=\"field.help\"></span>\n    <datetime #dateTime [formControl]=\"getFormControl()\" [timepicker]=\"field.timePickerOpts\" [datepicker]=\"field.datePickerOpts\" [hasClearButton]=\"field.hasClearButton\"></datetime>\n  </div>\n  <li *ngIf=\"!field.editMode\" class=\"key-value-pair\">\n    <span class=\"key\" *ngIf=\"field.label\">{{field.label}}</span>\n    <span class=\"value\">{{field.formatValueForDisplay()}}</span>\n  </li>\n  "}]}],"members":{"formatValue":[{"__symbolic":"method"}]}},"SaveButtonComponent":{"__symbolic":"class","extends":{"__symbolic":"reference","name":"SimpleComponent"},"decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Component","line":435,"character":1},"arguments":[{"selector":"save-button","template":"\n    <button type=\"button\" (click)=\"onClick($event)\" class=\"btn\" [ngClass]=\"field.cssClasses\" [disabled]=\"!fieldMap._rootComp.needsSave || fieldMap._rootComp.isSaving()\">{{field.label}}</button>\n  "}]}],"members":{"onClick":[{"__symbolic":"method"}]}},"CancelButtonComponent":{"__symbolic":"class","extends":{"__symbolic":"reference","name":"SimpleComponent"},"decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Component","line":467,"character":1},"arguments":[{"selector":"cancel-button","template":"\n    <button type=\"button\" class=\"btn btn-warning\" [disabled]=\"fieldMap._rootComp.isSaving()\" (click)=\"fieldMap._rootComp.onCancel()\">{{field.label}}</button>\n  "}]}]},"AnchorOrButtonComponent":{"__symbolic":"class","extends":{"__symbolic":"reference","name":"SimpleComponent"},"decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Component","line":479,"character":1},"arguments":[{"selector":"anchor-button","template":"\n  <button *ngIf=\"field.controlType=='button'\" type=\"{{field.type}}\" [ngClass]=\"field.cssClasses\" (click)=\"onClick($event)\" [disabled]=\"isDisabled()\">{{field.label}}</button>\n  <a *ngIf=\"field.controlType=='anchor'\" href='{{field.value}}' [ngClass]=\"field.cssClasses\" ><span *ngIf=\"field.showPencil\" class=\"glyphicon glyphicon-pencil\">&nbsp;</span>{{field.label}}</a>\n  "}]}],"members":{"onClick":[{"__symbolic":"method"}],"isDisabled":[{"__symbolic":"method"}]}},"LinkValueComponent":{"__symbolic":"class","extends":{"__symbolic":"reference","name":"SimpleComponent"},"decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Component","line":501,"character":1},"arguments":[{"selector":"link-value","template":"\n  <li *ngIf=\"!field.editMode && isVisible()\" class=\"key-value-pair padding-bottom-10\">\n    <span class=\"key\" *ngIf=\"field.label\">{{field.label}}</span>\n    <span class=\"value\"><a href='{{field.value}}' target=\"field.target\">{{field.value}}</a></span>\n  </li>\n  "}]}],"members":{"isVisible":[{"__symbolic":"method"}]}},"HiddenValueComponent":{"__symbolic":"class","extends":{"__symbolic":"reference","name":"SimpleComponent"},"decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Component","line":516,"character":1},"arguments":[{"selector":"hidden-field","template":"\n  <div [formGroup]='form'>\n    <input type=\"hidden\" [formControl]=\"getFormControl()\" />\n  </div>\n  "}]}],"members":{"handleChange":[{"__symbolic":"method"}]}}}}]